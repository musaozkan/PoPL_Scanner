LEFTPAR 1:1
DEFINE 1:2
LEFTPAR 1:10
IDENTIFIER 1:11
IDENTIFIER 1:21
RIGHTPAR 1:22
LEFTPAR 2:9
LET 2:11
IDENTIFIER 2:15
LEFTPAR 2:19
LEFTPAR 2:20
IDENTIFIER 2:21
NUMBER 2:26
RIGHTPAR 2:27
LEFTPAR 2:29
IDENTIFIER 2:30
NUMBER 2:34
RIGHTPAR 2:35
LEFTPAR 2:37
IDENTIFIER 2:38
NUMBER 2:40
RIGHTPAR 2:41
RIGHTPAR 2:42
LEFTPAR 3:15
IF 3:17
LEFTPAR 3:20
IDENTIFIER 3:21
IDENTIFIER 3:23
IDENTIFIER 3:25
RIGHTPAR 3:26
IDENTIFIER 3:28
LEFTPAR 3:32
IDENTIFIER 3:33
IDENTIFIER 3:37
LEFTPAR 3:41
IDENTIFIER 3:42
IDENTIFIER 3:44
IDENTIFIER 3:49
RIGHTPAR 3:52
LEFTPAR 3:54
IDENTIFIER 3:55
IDENTIFIER 3:57
NUMBER 3:59
RIGHTPAR 3:60
RIGHTPAR 3:61
RIGHTPAR 3:62
LEFTPAR 4:15
DEFINE 4:16
IDENTIFIER 4:23
IDENTIFIER 4:28
RIGHTPAR 4:29
RIGHTPAR 4:30
RIGHTPAR 4:31
<Program>
 <ToplevelForm>
  LEFTPAR (()
  <SecondLevelForm>
   <Definition>
    define (define)
    <DefinitionRight>
     LEFTPAR (()
     IDENTIFIER (fibonacci)
     <ArgList>
      IDENTIFIER (n)
      <ArgList>
           __
     RIGHTPAR ())
     <Statements>
      <Expression>
       LEFTPAR (()
       <Expr>
        <LetExpression>
         let (let)
         <LetExpr>
          IDENTIFIER (fib)
          LEFTPAR (()
          <VarDefs>
           LEFTPAR (()
           IDENTIFIER (prev)
           <Expression>
            NUMBER (0)
           RIGHTPAR ())
           <VarDef>
            <VarDefs>
             LEFTPAR (()
             IDENTIFIER (cur)
             <Expression>
              NUMBER (1)
             RIGHTPAR ())
             <VarDef>
              <VarDefs>
               LEFTPAR (()
               IDENTIFIER (i)
               <Expression>
                NUMBER (0)
               RIGHTPAR ())
               <VarDef>
                    __
          RIGHTPAR ())
          <Statements>
           <Expression>
            LEFTPAR (()
            <Expr>
             <IfExpression>
              if (if)
              <Expression>
               LEFTPAR (()
               <Expr>
                <FunCall>
                 IDENTIFIER (=)
                 <Expressions>
                  <Expression>
                   IDENTIFIER (i)
                  <Expressions>
                   <Expression>
                    IDENTIFIER (n)
                   <Expressions>
                        __
               RIGHTPAR ())
              <Expression>
               IDENTIFIER (cur)
              <EndExpression>
               <Expression>
                LEFTPAR (()
                <Expr>
                 <FunCall>
                  IDENTIFIER (fib)
                  <Expressions>
                   <Expression>
                    IDENTIFIER (cur)
                   <Expressions>
                    <Expression>
                     LEFTPAR (()
                     <Expr>
                      <FunCall>
                       IDENTIFIER (+)
                       <Expressions>
                        <Expression>
                         IDENTIFIER (prev)
                        <Expressions>
                         <Expression>
                          IDENTIFIER (cur)
                         <Expressions>
                              __
                     RIGHTPAR ())
                    <Expressions>
                     <Expression>
                      LEFTPAR (()
                      <Expr>
                       <FunCall>
                        IDENTIFIER (+)
                        <Expressions>
                         <Expression>
                          IDENTIFIER (i)
                         <Expressions>
                          <Expression>
                           NUMBER (1)
                          <Expressions>
                               __
                      RIGHTPAR ())
                     <Expressions>
                          __
                RIGHTPAR ())
            RIGHTPAR ())
SYNTAX ERROR [4:15]: ')' is expected.